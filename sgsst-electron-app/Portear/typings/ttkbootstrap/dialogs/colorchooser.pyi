"""
This type stub file was generated by pyright.
"""

import ttkbootstrap as ttk
from ttkbootstrap.validation import validator
from ttkbootstrap.constants import *
from ttkbootstrap.dialogs import Dialog

STD_SHADES = ...
STD_COLORS = ...
ColorValues = ...
ColorChoice = ...
PEN = ...
@validator
def validate_color(event): # -> bool:
    ...

class ColorChooser(ttk.Frame):
    """A class which creates a color chooser widget

    ![](../../assets/dialogs/querybox-get-color.png)
    """
    def __init__(self, master, initialcolor=..., padding=...) -> None:
        ...
    
    def create_spectrum(self, master): # -> Canvas:
        """Create the color spectrum canvas"""
        ...
    
    def create_spectrum_indicator(self): # -> None:
        """Create a square indicator that displays in the position of
        the selected color"""
        ...
    
    def create_swatches(self, master, colors): # -> Frame:
        """Create a grid of color swatches"""
        ...
    
    def create_preview(self, master): # -> Frame:
        """Create the preview frame for original and new colors"""
        ...
    
    def create_value_inputs(self, master): # -> Frame:
        """Create color value input widgets"""
        ...
    
    def create_luminance_scale(self, master): # -> Canvas:
        """Create the color luminance canvas"""
        ...
    
    def create_luminance_indicator(self): # -> None:
        """Create an indicator that displays in the position of the
        luminance value"""
        ...
    
    def coords_from_color(self, hexcolor): # -> tuple[float | Any, float | Any]:
        """Get the coordinates on the color spectrum from the color
        value"""
        ...
    
    def color_from_coords(self, x, y): # -> ColorValues:
        """Get the color value from the mouse position in the color
        spectrum"""
        ...
    
    def set_variables(self, h, s, l, r, g, b, hx): # -> None:
        """Update the color value variables"""
        ...
    
    def get_variables(self): # -> ColorValues:
        """Get the values of all color models and return a
        tuple of color values"""
        ...
    
    def update_preview(self): # -> None:
        """Update the color in the preview frame"""
        ...
    
    def update_luminance_scale(self): # -> None:
        """Update the luminance scale with the change in hue and saturation"""
        ...
    
    def update_luminance_indicator(self): # -> None:
        """Update the position of the luminance indicator"""
        ...
    
    def update_spectrum_indicator(self): # -> None:
        """Move the spectrum indicator to a new location"""
        ...
    
    def sync_color_values(self, model): # -> None:
        """Callback for when a color value changes. A change in one
        value will automatically update the other values so that all
        color models remain in sync."""
        ...
    
    def on_entry_value_change(self, widget: ttk.Spinbox, model): # -> None:
        """Update the widget colors when the color value input is
        changed"""
        ...
    
    def on_press_swatch(self, event): # -> None:
        """Update the widget colors when a color swatch is clicked."""
        ...
    
    def on_spectrum_interaction(self, event): # -> None:
        """Update the widget colors when the color spectrum canvas is
        pressed"""
        ...
    
    def on_luminance_interaction(self, event): # -> None:
        """Update the widget colors when the color luminance scale is
        pressed"""
        ...
    


class ColorChooserDialog(Dialog):
    """A class which displays a color chooser dialog. When a color
    option is selected and the "OK" button is pressed, the dialog will
    return a namedtuple that contains the color values for rgb, hsl, and
    hex. These values can be accessed by indexing the tuple or by using
    the named fields.

    ![](../../assets/dialogs/querybox-get-color.png)

    Examples:

        ```python
        >>> cd = ColorChooserDialog()
        >>> cd.show()
        >>> colors = cd.result
        >>> colors.hex
        '#5fb04f'
        >>> colors[2]
        '#5fb04f
        >>> colors.rgb
        (95, 176, 79)
        >>> colors[0]
        (95, 176, 79)
        ```
    """
    def __init__(self, parent=..., title=..., initialcolor=...) -> None:
        ...
    
    def create_body(self, master): # -> None:
        ...
    
    def create_buttonbox(self, master): # -> None:
        ...
    
    def on_show_colordropper(self, event): # -> None:
        ...
    
    def trace_dropper_color(self, *_): # -> None:
        ...
    
    def on_button_press(self, button): # -> None:
        ...
    


