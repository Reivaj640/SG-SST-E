"""
This type stub file was generated by pyright.
"""

RGB = ...
HSL = ...
HEX = ...
NAME = ...
HUE = ...
SAT = ...
LUM = ...
def color_to_rgb(color, model=...): # -> tuple[int, int, int] | tuple[int, int, int, int] | None:
    """Convert color value to rgb.

    The color and model parameters represent the color to be converted.
    The value is expected to be a string for "name" and "hex" models and
    a Tuple or List for "rgb" and "hsl" models.
    
    Parameters:
        
        color (Any):
            The color values for the model being converted.
            
        model (str):
            The color model being converted.
    
    Returns:
    
        Tuple[int, int, int]:
            The rgb color values.
    """
    ...

def color_to_hex(color, model=...): # -> str:
    """Convert color value to hex.

    The color and model parameters represent the color to be converted.
    The value is expected to be a string for "name" and "hex" models and
    a Tuple or List for "rgb" and "hsl" models.
    
    Parameters:
        
        color (Any):
            The color values for the model being converted.
            
        model (str):
            The color model being converted.
    
    Returns:
    
        str:
            The hexadecimal color value.
    """
    ...

def color_to_hsl(color, model=...): # -> tuple[int, int, int]:
    """Convert color value to hsl.

    The color and model parameters represent the color to be converted.
    The value is expected to be a string for "name" and "hex" models and
    a Tuple or List for "rgb" and "hsl" models.
    
    Parameters:
        
        color (Any):
            The color values for the model being converted.
            
        model (str):
            The color model being converted.
    
    Returns:
    
        Tuple[int, int, int]:
            The hsl color values.
    """
    ...

def update_hsl_value(color, hue=..., sat=..., lum=..., inmodel=..., outmodel=...): # -> tuple[int, int, int] | tuple[int, int, int, int] | str | tuple[Any | int, Any | int, Any | int] | None:
    """Change hue, saturation, or lumenosity of the color based on the
    hue, sat, lum parameters provided.
    
    Parameters:

        color (Any):
            The color

        hue (int):
            A number between 0 and 360.

        sat (int):
            A number between 0 and 100.

        lum (int):
            A number between 0 and 100.

        inmodel (str):
            The color model used by the color to be changed. One of
            hsl, rgb, hex, name.

        outmodel (str):
            The color value model to be returned when the color is
            changed. One of hsl, rgb, hex.

    Returns:

        Union[Tuple[int, int, int], str]:
            The color value based on the selected color model.
    """
    ...

def contrast_color(color, model=..., darkcolor=..., lightcolor=...): # -> str:
    """Returns the best matching contrasting light or dark color for
    the given color.
    
    Parameters:

        color (Any):
            The color value to evaluate.

        model (str):
            The model of the color value to be evaluated. 'rgb' by 
            default.

        darkcolor (Any):
            The color value to be returned when the constrasting color 
            should be dark.

        lightcolor (Any):
            The color value to be returned when the constrasting color
            should be light.

    Returns:

        str:
            The matching color value.
    """
    ...

def conform_color_model(color, model): # -> str:
    """Conform the color values to a string that can be interpreted
    by the `PIL.ImageColor.getrgb method`.

    Parameters:

        color (Union[Tuple[int, int, int], str]):
            The color value to conform.

        model (str):
            One of 'HSL', 'RGB', or 'HEX'

    Returns:

        str:
            A color value string that can be used as a parameter in the
            PIL.ImageColor.getrgb method.
    """
    ...

