"""
This type stub file was generated by pyright.
"""

"""
    A module various classes that can be used either in text as `Emoji` 
    or in the tkinter.PhotoImage class as in `Icon`.
"""
class Icon:
    """A container class that contains base64 image attributes that can
    be used in the `PhotoImage` class using the `data` parameter.

    Attributes:

        icon (str): The ttkbootstrap icon.
        error (str): An error image.
        warning (str): A warning image.
        question (str): A question image.
        info (str): An info image.

    Examples:

        ```python
        img = tk.PhotoImage(data=Icon.warning)
        ```
    """
    icon = ...
    error = ...
    warning = ...
    question = ...
    info = ...


class EmojiItem:
    """A container for an emoji character used by the Emoji class"""
    def __init__(self, name, category, subcategory, char) -> None:
        """
        Parameters:

            name (str):
                The name of the emoji character.

            category (str):
                The major category of the emoji character.

            subcategory (str):
                The subcategory of the emoji character.

            char (str):
                The unicode character.
        """
        ...
    
    def __repr__(self) -> str:
        ...
    


class Emoji:
    """A class that contains emoji characters that can be used in the
    `text` parameter in any tkinter widget with the option.
    """
    _ITEMS = ...
    @staticmethod
    def categories(): # -> set[Any]:
        """Get a set of categories.

        Returns:

            set:
                Emoji categories.

        Examples:

            ```python
            >>> Emoji.categories()
            {'component', 'animal-nature', 'objects', 'symbols', 'flags',
             'people-body', 'smiley-emotion', 'activities', 'food-drink',
             'travel-places'}
            ```
        """
        ...
    
    @staticmethod
    def subcategories(category: str = ...): # -> set[Any]:
        """Get a set of all subcategories or for a specific category.

        Parameters:

            category (str):
                The name of the category to query.

        Returns:

            set:
                All subcategories or categories for a specific category.

        Examples:

            ```python
            >>> Emoji.subcategories('activities')
            {'award-medal', 'arts & crafts', 'event', 'game', 'sport'}
            ```
        """
        ...
    
    @staticmethod
    def get(name: str): # -> EmojiItem | None:
        """Lookup an emoji by name.

        Parameters:

            name (str):
                The name of the emoji to lookup.

        Returns:

            Union[EmojiItem, None]:
                The selected emoji or None if not found.

        Examples:

            ```python
            >>> Emoji.get('winking face')
            ðŸ˜‰

            >>> face = Emoji.get('winking face')
            >>> face.name
            WINKING FACE

            >>> face.category
            smiley-emotion

            >>> face.subcategory
            face.smiling

            >>> face.char
            ðŸ˜‰
            ```
        """
        ...
    


if __name__ == "__main__":
    ...
