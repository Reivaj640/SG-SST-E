"""
This type stub file was generated by pyright.
"""

import tkinter as tk
from tkinter import ttk
from typing import Any
from ttkbootstrap.constants import *

class Colors:
    """A class that defines the color scheme for a theme as well as
    provides several static methods for manipulating colors.

    A `Colors` object is attached to a `ThemeDefinition` and can also
    be accessed through the `Style.colors` property for the
    current theme.

    Examples:

        ```python
        style = Style()

        # dot-notation
        style.colors.primary

        # get method
        style.colors.get('primary')
        ```

        This class is an iterator, so you can iterate over the main
        style color labels (primary, secondary, success, info, warning,
        danger):

        ```python
        for color_label in style.colors:
            color = style.colors.get(color_label)
            print(color_label, color)
        ```

        If, for some reason, you need to iterate over all theme color
        labels, then you can use the `Colors.label_iter` method. This
        will include all theme colors.

        ```python
        for color_label in style.colors.label_iter():
            color = Colors.get(color_label)
            print(color_label, color)
        ```

        If you want to adjust the hsv values of an existing color by a
        specific percentage (delta), you can use the `Colors.update_hsv`
        method, which is static. In the example below, the "value delta"
        or `vd` is increased by 15%, which will lighten the color:

        ```python
        Colors.update_hsv("#9954bb", vd=0.15)
        ```
    """
    def __init__(self, primary, secondary, success, info, warning, danger, light, dark, bg, fg, selectbg, selectfg, border, inputfg, inputbg, active) -> None:
        """
        Parameters:

            primary (str):
                The primary theme color; used by default for all widgets.

            secondary (str):
                An accent color; commonly of a `grey` hue.

            success (str):
                An accent color; commonly of a `green` hue.

            info (str):
                An accent color; commonly of a `blue` hue.

            warning (str):
                An accent color; commonly of an `orange` hue.

            danger (str):
                An accent color; commonly of a `red` hue.

            light (str):
                An accent color.

            dark (str):
                An accent color.

            bg (str):
                Background color.

            fg (str):
                Default text color.

            selectfg (str):
                The color of selected text.

            selectbg (str):
                The background color of selected text.

            border (str):
                The color used for widget borders.

            inputfg (str):
                The text color for input widgets.

            inputbg (str):
                The text background color for input widgets.

            active (str):
                An accent color.
        """
        ...
    
    @staticmethod
    def make_transparent(alpha, foreground, background=...): # -> str:
        """Simulate color transparency.
        
        Parameters:

            alpha (float):
                The amount of transparency; a number between 0 and 1.

            foreground (str):
                The foreground color.

            background (str):
                The background color.

        Returns:

            str:
                A hexadecimal color representing the "transparent" 
                version of the foreground color against the background 
                color.
        """
        ...
    
    @staticmethod
    def rgb_to_hsv(r, g, b): # -> tuple[float, float, float]:
        """Convert an rgb to hsv color value.

        Parameters:
            r (float):
                red
            g (float):
                green
            b (float):
                blue

        Returns:
            Tuple[float, float, float]: The hsv color value.
        """
        ...
    
    def get_luminance(self, color): # -> float | Any:
        """Calculate the luminance of a color.

        Parameters:
            color (str):
                A hexadecimal color value.
        Returns:
            float:
                The luminance value of the color.
        """
        ...
    
    def get_contrast_ration(self, lum1, lum2):
        """Calculate the contrast ratio between two luminance values.

        Parameters:
            lum1 (float):
                The first luminance value.
            lum2 (float):
                The second luminance value.

        Returns:
            float:
                The contrast ratio.
        """
        ...
    
    def get_foreground(self, color_label): # -> Any:
        """Return the appropriate foreground color for the specified
        color_label.

        Parameters:
            color_label (str):
                A color label corresponding to a class property

        Returns:
            str:
                A hexadecimal color value for the foreground color.

        Raises:
            TypeError: If the color_label is not a valid color property.
        """
        ...
    
    def get(self, color_label: str): # -> Any | None:
        """Lookup a color value from the color name

        Parameters:

            color_label (str):
                A color label corresponding to a class propery

        Returns:

            str:
                A hexadecimal color value.
        """
        ...
    
    def set(self, color_label: str, color_value: str): # -> None:
        """Set a color property value. This does not update any existing
        widgets. Can also be used to create on-demand color properties
        that can be used in your program after creation.

        Parameters:

            color_label (str):
                The name of the color to be set (key)

            color_value (str):
                A hexadecimal color value
        """
        ...
    
    def __iter__(self): # -> Iterator[str]:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    @staticmethod
    def label_iter(): # -> Iterator[str]:
        """Iterate over all color label properties in the Color class

        Returns:

            iter:
                An iterator for color label names
        """
        ...
    
    @staticmethod
    def hex_to_rgb(color: str): # -> tuple[float | Any, float | Any, float | Any]:
        """Convert hexadecimal color to rgb color value

        Parameters:

            color (str):
                A hexadecimal color value

        Returns:

            tuple[int, int, int]:
                An rgb color value.
        """
        ...
    
    @staticmethod
    def rgb_to_hex(r: int, g: int, b: int): # -> str:
        """Convert rgb to hexadecimal color value

        Parameters:

            r (int):
                red

            g (int):
                green

            b (int):
                blue

        Returns:

            str:
                A hexadecimal color value
        """
        ...
    
    @staticmethod
    def update_hsv(color, hd=..., sd=..., vd=...): # -> str:
        """Modify the hue, saturation, and/or value of a given hex
        color value by specifying the _delta_.

        Parameters:

            color (str):
                A hexadecimal color value to adjust.

            hd (float):
                % change in hue, _hue delta_.

            sd (float):
                % change in saturation, _saturation delta_.

            vd (float):
                % change in value, _value delta_.

        Returns:

            str:
                The resulting hexadecimal color value
        """
        ...
    


class ThemeDefinition:
    """A class to provide defined name, colors, and font settings for a
    ttkbootstrap theme."""
    def __init__(self, name, colors, themetype=...) -> None:
        """
        Parameters:

            name (str):
                The name of the theme.

            colors (Colors or dict):
                A Colors instance or a dict of color values.

            themetype (str):
                Specifies whether the theme is **light** or **dark**.
        """
        ...
    
    def __repr__(self): # -> str:
        ...
    


class Style(ttk.Style):
    """A singleton class for creating and managing the application
    theme and widget styles.

    This class is meant to be a drop-in replacement for `ttk.Style` and
    inherits all of it's methods and properties. However, in
    ttkbootstrap, this class is implemented as a singleton. Subclassing
    is not recommended and may have unintended consequences.

    Examples:

        ```python
        # instantiate the style with default theme
        style = Style()

        # instantiate the style with another theme
        style = Style(theme='superhero')

        # check all available themes
        for theme in style.theme_names():
            print(theme)
        ```

    See the [Python documentation](https://docs.python.org/3/library/tkinter.ttk.html#tkinter.ttk.Style)
    on this class for more details.
    """
    instance = ...
    def __new__(cls, theme=...): # -> Self | Style:
        ...
    
    def __init__(self, theme=...) -> None:
        """
        Parameters:

            theme (str):
                The name of the theme to use when styling the widget.
        """
        ...
    
    @property
    def colors(self): # -> list[Any]:
        """An object that contains the colors used for the current
        theme.

        Returns:

            Colors:
                The colors object for the current theme.
        """
        ...
    
    def configure(self, style, query_opt: Any = ..., **kw):
        ...
    
    def theme_names(self): # -> list[Any]:
        """Return a list of all ttkbootstrap themes.

        Returns:

            List[str, ...]:
                A list of theme names.
        """
        ...
    
    def register_theme(self, definition): # -> None:
        """Register a theme definition for use by the `Style`
        object. This makes the definition and name available at
        run-time so that the assets and styles can be created when
        needed.

        Parameters:

            definition (ThemeDefinition):
                A `ThemeDefinition` object.
        """
        ...
    
    def theme_use(self, themename=...): # -> str | None:
        """Changes the theme used in rendering the application widgets.

        If themename is None, returns the theme in use, otherwise, set
        the current theme to themename, refreshes all widgets and emits
        a ``<<ThemeChanged>>`` event.

        Only use this method if you are changing the theme *during*
        runtime. Otherwise, pass the theme name into the Style
        constructor to instantiate the style with a theme.

        Parameters:

            themename (str):
                The name of the theme to apply when creating new widgets

        Returns:

            Union[str, None]:
                The name of the current theme if `themename` is None
                otherwise, `None`.
        """
        ...
    
    def theme_create(self, themename: str, parent: str = ..., settings: dict = ...) -> None:
        """
        Create a new theme in the Tcl interpreter. If the parent is a registered
        ttkbootstrap theme, the new theme will be registered with a copied
        ThemeDefinition and builder. Duplicate registration is avoided.

        Parameters:

            themename (str):
                The name of the new theme.

            parent (str):
                The name of the parent theme to inherit from.

            settings (dict):
                A dictionary of style settings (Tcl-style).
        """
        ...
    
    def style_exists_in_theme(self, ttkstyle: str): # -> bool:
        """Check if a style exists in the current theme.

        Parameters:

            ttkstyle (str):
                The ttk style to check.

        Returns:

            bool:
                `True` if the style exists, otherwise `False`.
        """
        ...
    
    def use_dynamic_foreground(self, enable: bool = ...): # -> None:
        """Enable or disable dynamic foreground color selection.

        When enabled, the foreground color of widgets will be decided
        between the `fg` and `selectfg` colors based on the
        contrast ratio with the widget's background color.
        At default, this is disabled.

        Parameters:

            enable (bool):
                If `True`, dynamic foreground selection is enabled.
                Otherwise, it is disabled.
        """
        ...
    
    @property
    def dynamic_foreground(self): # -> bool:
        """Returns `True` if dynamic foreground selection is enabled,
        otherwise `False`.
        """
        ...
    
    @staticmethod
    def get_instance(): # -> Style | None:
        """Returns and instance of the style class"""
        ...
    
    def load_user_theme(self, theme: ThemeDefinition): # -> None:
        """Load a user theme definition"""
        ...
    
    def load_user_themes(self, file): # -> None:
        """Load user themes saved in json format"""
        ...
    


class StyleBuilderTK:
    """A class for styling legacy tkinter widgets (not ttk).

    The methods in this classed are used internally to update tk widget
    style configurations and are not intended to be called by the end
    user.

    All legacy tkinter widgets are updated with a callback whenever the
    theme is changed. The color configuration of the widget is updated
    to match the current theme. Legacy ttk widgets are not the primary
    focus of this library, however, an attempt was made to make sure they
    did not stick out amongst ttk widgets if used.

    Some ttk widgets contain legacy components that must be updated
    such as the Combobox popdown, so this ensures they are styled
    completely to match the current theme.
    """
    def __init__(self) -> None:
        ...
    
    @property
    def theme(self) -> ThemeDefinition:
        """A reference to the `ThemeDefinition` object for the current
        theme."""
        ...
    
    @property
    def colors(self) -> Colors:
        """A reference to the `Colors` object for the current theme."""
        ...
    
    @property
    def is_light_theme(self) -> bool:
        """Returns `True` if the theme is _light_, otherwise `False`."""
        ...
    
    def update_tk_style(self, widget: tk.Tk): # -> None:
        """Update the window style.

        Parameters:

            widget (tkinter.Tk):
                The tk object to update.
        """
        ...
    
    def update_toplevel_style(self, widget: tk.Toplevel): # -> None:
        """Update the toplevel style.

        Parameters:

            widget (tkinter.Toplevel):
                The toplevel object to update.
        """
        ...
    
    def update_canvas_style(self, widget: tk.Canvas): # -> None:
        """Update the canvas style.

        Parameters:

            widget (tkinter.Canvas):
                The canvas object to update.
        """
        ...
    
    def update_button_style(self, widget: tk.Button): # -> None:
        """Update the button style.

        Parameters:

            widget (tkinter.Button):
                The button object to update.
        """
        ...
    
    def update_label_style(self, widget: tk.Label): # -> None:
        """Update the label style.

        Parameters:

            widget (tkinter.Label):
                The label object to update.
        """
        ...
    
    def update_frame_style(self, widget: tk.Frame): # -> None:
        """Update the frame style.

        Parameters:

            widget (tkinter.Frame):
                The frame object to update.
        """
        ...
    
    def update_checkbutton_style(self, widget: tk.Checkbutton): # -> None:
        """Update the checkbutton style.

        Parameters:

            widget (tkinter.Checkbutton):
                The checkbutton object to update.
        """
        ...
    
    def update_radiobutton_style(self, widget: tk.Radiobutton): # -> None:
        """Update the radiobutton style.

        Parameters:

            widget (tkinter.Radiobutton):
                The radiobutton object to update.
        """
        ...
    
    def update_entry_style(self, widget: tk.Entry): # -> None:
        """Update the entry style.

        Parameters:

            widget (tkinter.Entry):
                The entry object to update.
        """
        ...
    
    def update_scale_style(self, widget: tk.Scale): # -> None:
        """Update the scale style.

        Parameters:

            widget (tkinter.scale):
                The scale object to update.
        """
        ...
    
    def update_spinbox_style(self, widget: tk.Spinbox): # -> None:
        """Update the spinbox style.

        Parameters:

            widget (tkinter.Spinbox):
                THe spinbox object to update.
        """
        ...
    
    def update_listbox_style(self, widget: tk.Listbox): # -> None:
        """Update the listbox style.

        Parameters:

            widget (tkinter.Listbox):
                The listbox object to update.
        """
        ...
    
    def update_menubutton_style(self, widget: tk.Menubutton): # -> None:
        """Update the menubutton style.

        Parameters:

            widget (tkinter.Menubutton):
                The menubutton object to update.
        """
        ...
    
    def update_menu_style(self, widget: tk.Menu): # -> None:
        """Update the menu style.

        Parameters:

            widget (tkinter.Menu):
                The menu object to update.
        """
        ...
    
    def update_labelframe_style(self, widget: tk.LabelFrame): # -> None:
        """Update the labelframe style.

        Parameters:

            widget (tkinter.LabelFrame):
                The labelframe object to update.
        """
        ...
    
    def update_text_style(self, widget: tk.Text): # -> None:
        """Update the text style.

        Parameters:

            widget (tkinter.Text):
                The text object to update.
        """
        ...
    


class StyleBuilderTTK:
    """A class containing methods for building new ttk widget styles on
    demand.

    The methods in this classed are used internally to generate ttk
    widget styles on-demand and are not intended to be called by the end
    user.
    """
    def __init__(self, build: bool = ...) -> None:
        ...
    
    @staticmethod
    def name_to_method(method_name): # -> Any:
        """Get a method by name.

        Parameters:

            method_name (str):
                The name of the style builder method.

        Returns:

            Callable:
                The method that is named by `method_name`
        """
        ...
    
    @property
    def colors(self) -> Colors:
        """A reference to the `Colors` object of the current theme."""
        ...
    
    @property
    def theme(self) -> ThemeDefinition:
        """A reference to the `ThemeDefinition` object for the current
        theme."""
        ...
    
    @property
    def is_light_theme(self) -> bool:
        """If the current theme is _light_, returns `True`, otherwise
        returns `False`."""
        ...
    
    def scale_size(self, size): # -> Any | list[Any] | None:
        """Scale the size of images and other assets based on the
        scaling factor of ttk to ensure that the image matches the
        screen resolution.

        Parameters:

            size (Union[int, List, Tuple]):
                A single integer or an iterable of integers
        """
        ...
    
    def create_theme(self): # -> None:
        """Create and style a new ttk theme. A wrapper around internal
        style methods.
        """
        ...
    
    def update_ttk_theme_settings(self): # -> None:
        """This method is called internally every time the theme is
        changed to update various components included in the body of
        the method."""
        ...
    
    def create_default_style(self): # -> None:
        """Setup the default widget style configuration for the root
        ttk style "."; these defaults are applied to any widget that
        contains the configuration options updated by this style. This
        method should be called *first* before any other style is applied
        during theme creation.
        """
        ...
    
    def create_combobox_style(self, colorname=...): # -> None:
        """Create a style for the ttk.Combobox widget.

        Parameters:

            colorname (str):
                The color label to use as the primary widget color.
        """
        ...
    
    def create_separator_style(self, colorname=...): # -> None:
        """Create a style for the ttk.Separator widget.

        Parameters:

            colorname (str):
                The primary widget color.
        """
        ...
    
    def create_striped_progressbar_assets(self, thickness, colorname=...): # -> tuple[Any, Any]:
        """Create the striped progressbar image and return as a
        `PhotoImage`

        Parameters:

            colorname (str):
                The color label used to style the widget.

        Returns:

            Tuple[str]:
                A list of photoimage names.
        """
        ...
    
    def create_striped_progressbar_style(self, colorname=...): # -> None:
        """Create a striped style for the ttk.Progressbar widget.

        Parameters:

            colorname (str):
                The primary widget color label.
        """
        ...
    
    def create_progressbar_style(self, colorname=...): # -> None:
        """Create a solid ttk style for the ttk.Progressbar widget.

        Parameters:

            colorname (str):
                The primary widget color.
        """
        ...
    
    def create_scale_assets(self, colorname=..., size=...): # -> tuple[Any, Any, Any, Any, Any, Any]:
        """Create the assets used for the ttk.Scale widget.

        The slider handle is automatically adjusted to fit the
        screen resolution.

        Parameters:

            colorname (str):
                The color label.

            size (int):
                The size diameter of the slider circle; default=16.

        Returns:

            Tuple[str]:
                A tuple of PhotoImage names to be used in the image
                layout when building the style.
        """
        ...
    
    def create_scale_style(self, colorname=...): # -> None:
        """Create a style for the ttk.Scale widget.

        Parameters:

            colorname (str):
                The color label used to style the widget.
        """
        ...
    
    def create_floodgauge_style(self, colorname=...): # -> None:
        """Create a ttk style for the ttkbootstrap.widgets.Floodgauge
        widget. This is a custom widget style that uses components of
        the progressbar and label.

        Parameters:

            colorname (str):
                The color label used to style the widget.
        """
        ...
    
    def create_simple_arrow_assets(self, arrowcolor: str, disabledcolor: str, activecolor: str, y_offset: int = ...): # -> tuple[tuple[Any, Any, Any, Any], tuple[Any, Any, Any, Any], tuple[Any, Any, Any, Any]]:
        """
        Create simple arrow assets (small triangles) that can be used for various widgets.
        Originally created to replace Combobox.downarrow to fix layout issues in python 3.13.
        Also used for the Spinbox widget.

        Args:
            arrowcolor: The color value to use as the arrow fill color.
            disabledcolor: A second color value to use when the arrow is disabled.
            activecolor: A third color value to use when the arrow has focus.
            y_offset: (optional) The vertical padding to apply to the arrow images (useful in spinnboxes).
        Returns:
            A nested tuple containing the names of the created arrow images in the order (up, down, left, right)
            for each color.
        """
        ...
    
    def create_arrow_assets(self, arrowcolor, pressed, active): # -> tuple[tuple[Any, Any, Any, Any], tuple[Any, Any, Any, Any], tuple[Any, Any, Any, Any]]:
        """Create arrow assets used for various widget buttons.

        !!! note
            This method is currently not being utilized.

        Parameters:

            arrowcolor (str):
                The color value to use as the arrow fill color.

            pressed (str):
                The color value to use when the arrow is pressed.

            active (str):
                The color value to use when the arrow is active or
                hovered.
        """
        ...
    
    def create_round_scrollbar_assets(self, thumbcolor, pressed, active): # -> tuple[Any, Any, Any, Any, Any, Any]:
        """Create image assets to be used when building the round
        scrollbar style.

        Parameters:

            thumbcolor (str):
                The color value of the thumb in normal state.

            pressed (str):
                The color value to use when the thumb is pressed.

            active (str):
                The color value to use when the thumb is active or
                hovered.
        """
        ...
    
    def create_round_scrollbar_style(self, colorname=...): # -> None:
        """Create a round style for the ttk.Scrollbar widget.

        Parameters:

            colorname (str):
                The color label used to style the widget.
        """
        ...
    
    def create_scrollbar_assets(self, thumbcolor, pressed, active): # -> tuple[Any, Any, Any, Any, Any, Any]:
        """Create the image assets used to build the standard scrollbar
        style.

        Parameters:

            thumbcolor (str):
                The primary color value used to color the thumb.

            pressed (str):
                The color value to use when the thumb is pressed.

            active (str):
                The color value to use when the thumb is active or
                hovered.
        """
        ...
    
    def create_scrollbar_style(self, colorname=...): # -> None:
        """Create a standard style for the ttk.Scrollbar widget.

        Parameters:

            colorname (str):
                The color label used to style the widget.
        """
        ...
    
    def create_spinbox_style(self, colorname=...): # -> None:
        """Create a style for the ttk.Spinbox widget.

        Parameters:

            colorname (str):
                The color label used to style the widget.
        """
        ...
    
    def create_table_treeview_style(self, colorname=...): # -> None:
        """Create a style for the Tableview widget.

        Parameters:

            colorname (str):
                The color label used to style the widget.
        """
        ...
    
    def create_treeview_style(self, colorname=...): # -> None:
        """Create a style for the ttk.Treeview widget.

        Parameters:

            colorname (str):
                The color label used to style the widget.
        """
        ...
    
    def create_frame_style(self, colorname=...): # -> None:
        """Create a style for the ttk.Frame widget.

        Parameters:

            colorname (str):
                The color label used to style the widget.
        """
        ...
    
    def create_button_style(self, colorname=...): # -> None:
        """Create a solid style for the ttk.Button widget.

        Parameters:

            colorname (str):
                The color label used to style the widget.
        """
        ...
    
    def create_outline_button_style(self, colorname=...): # -> None:
        """Create an outline style for the ttk.Button widget.

        Parameters:

            colorname (str):
                The color label used to style the widget.
        """
        ...
    
    def create_link_button_style(self, colorname=...): # -> None:
        """Create a link button style for the ttk.Button widget.

        Parameters:

            colorname (str):
                The color label used to style the widget.
        """
        ...
    
    def create_square_toggle_assets(self, colorname=...): # -> tuple[Any, Any, Any, Any]:
        """Create the image assets used to build a square toggle
        style.

        Parameters:

            colorname (str):
                The color label used to style the widget.

        Returns:

            Tuple[str]:
                A tuple of PhotoImage names.
        """
        ...
    
    def create_toggle_style(self, colorname=...): # -> None:
        """Create a round toggle style for the ttk.Checkbutton widget.

        Parameters:

            colorname (str):
        """
        ...
    
    def create_round_toggle_assets(self, colorname=...): # -> tuple[Any, Any, Any, Any]:
        """Create image assets for the round toggle style.

        Parameters:

            colorname (str):
                The color label assigned to the colors property.

        Returns:

            Tuple[str]:
                A tuple of PhotoImage names.
        """
        ...
    
    def create_round_toggle_style(self, colorname=...): # -> None:
        """Create a round toggle style for the ttk.Checkbutton widget.

        Parameters:

            colorname (str):
                The color label used to style the widget.
        """
        ...
    
    def create_square_toggle_style(self, colorname=...): # -> None:
        """Create a square toggle style for the ttk.Checkbutton widget.

        Parameters:

            colorname (str):
                The color label used to style the widget.
        """
        ...
    
    def create_toolbutton_style(self, colorname=...): # -> None:
        """Create a solid toolbutton style for the ttk.Checkbutton
        and ttk.Radiobutton widgets.

        Parameters:

            colorname (str):
                The color label used to style the widget.
        """
        ...
    
    def create_outline_toolbutton_style(self, colorname=...): # -> None:
        """Create an outline toolbutton style for the ttk.Checkbutton
        and ttk.Radiobutton widgets.

        Parameters:

            colorname (str):
                The color label used to style the widget.
        """
        ...
    
    def create_entry_style(self, colorname=...): # -> None:
        """Create a style for the ttk.Entry widget.

        Parameters:

            colorname (str):
                The color label used to style the widget.
        """
        ...
    
    def create_radiobutton_assets(self, colorname=...): # -> tuple[Any, Any, Any, Any]:
        """Create the image assets used to build the radiobutton style.

        Parameters:

            colorname (str):

        Returns:

            Tuple[str]:
                A tuple of PhotoImage names
        """
        ...
    
    def create_radiobutton_style(self, colorname=...): # -> None:
        """Create a style for the ttk.Radiobutton widget.

        Parameters:

            colorname (str):
                The color label used to style the widget.
        """
        ...
    
    def create_date_button_assets(self, foreground):
        """Create the image assets used to build the date button
        style. This button style applied to the button in the
        ttkbootstrap.widgets.DateEntry.

        Parameters:

            foreground (str):
                The color value used to draw the calendar image.

        Returns:

            str:
                The PhotoImage name.
        """
        ...
    
    def create_date_button_style(self, colorname=...): # -> None:
        """Create a date button style for the ttk.Button widget.

        Parameters:

            colorname (str):
                The color label used to style widget.
        """
        ...
    
    def create_calendar_style(self, colorname=...): # -> None:
        """Create a style for the
        ttkbootstrap.dialogs.DatePickerPopup widget.

        Parameters:

            colorname (str):
                The color label used to style the widget.
        """
        ...
    
    def create_metersubtxt_label_style(self, colorname=...): # -> None:
        """Create a subtext label style for the
        ttkbootstrap.widgets.Meter widget.

        Parameters:

            colorname (str):
                The color label used to style the widget.
        """
        ...
    
    def create_meter_label_style(self, colorname=...): # -> None:
        """Create a label style for the
        ttkbootstrap.widgets.Meter widget. This style also stores some
        metadata that is called by the Meter class to lookup relevant
        colors for the trough and bar when the new image is drawn.

        Parameters:

            colorname (str):
                The color label used to style the widget.
        """
        ...
    
    def create_label_style(self, colorname=...): # -> None:
        """Create a standard style for the ttk.Label widget.

        Parameters:

            colorname (str):
                The color label used to style the widget.
        """
        ...
    
    def create_inverse_label_style(self, colorname=...): # -> None:
        """Create an inverted style for the ttk.Label.

        The foreground and background are inverted versions of that
        used in the standard label style.

        Parameters:

            colorname (str):
                The color label used to style the widget.
        """
        ...
    
    def create_labelframe_style(self, colorname=...): # -> None:
        """Create a style for the ttk.Labelframe widget.

        Parameters:

            colorname (str):
                The color label used to style the widget.
        """
        ...
    
    def create_checkbutton_style(self, colorname=...): # -> None:
        """Create a standard style for the ttk.Checkbutton widget.

        Parameters:

            colorname (str):
                The color label used to style the widget.
        """
        ...
    
    def create_checkbutton_assets(self, colorname=...): # -> tuple[Any, Any, Any, Any, Any, Any]:
        """Create the image assets used to build the standard
        checkbutton style.

        Parameters:

            colorname (str):
                The color label used to style the widget.

        Returns:

            Tuple[str]:
                A tuple of PhotoImage names.
        """
        ...
    
    def create_menubutton_style(self, colorname=...): # -> None:
        """Create a solid style for the ttk.Menubutton widget.

        Parameters:

            colorname (str):
                The color label used to style the widget.
        """
        ...
    
    def create_outline_menubutton_style(self, colorname=...): # -> None:
        """Create an outline button style for the ttk.Menubutton widget

        Parameters:

            colorname (str):
                The color label used to style the widget.
        """
        ...
    
    def create_notebook_style(self, colorname=...): # -> None:
        """Create a standard style for the ttk.Notebook widget.

        Parameters:

            colorname (str):
                The color label used to style the widget.
        """
        ...
    
    def create_panedwindow_style(self, colorname=...): # -> None:
        """Create a standard style for the ttk.Panedwindow widget.

        Parameters:

            colorname (str):
                The color label used to style the widget.
        """
        ...
    
    def create_sizegrip_assets(self, color):
        """Create image assets used to build the sizegrip style.

        Parameters:

            color (str):
                The color _value_ used to draw the image.

        Returns:

            str:
                The PhotoImage name.
        """
        ...
    
    def create_sizegrip_style(self, colorname=...): # -> None:
        """Create a style for the ttk.Sizegrip widget.

        Parameters:

            colorname (str):
                The color label used to style the widget.
        """
        ...
    
    def update_combobox_popdown_style(self, widget): # -> None:
        """Update the legacy ttk.Combobox elements. This method is
        called every time the theme is changed in order to ensure
        that the legacy tkinter components embedded in this ttk widget
        are styled appropriate to the current theme.

        The ttk.Combobox contains several elements that are not styled
        using the ttk theme engine. This includes the **popdownwindow**
        and the **scrollbar**. Both of these widgets are configured
        manually using calls to tcl/tk.

        Parameters:

            widget (ttk.Combobox):
                The combobox element to be updated.
        """
        ...
    


class Keywords:
    COLORS = ...
    ORIENTS = ...
    TYPES = ...
    CLASSES = ...
    COLOR_PATTERN = ...
    ORIENT_PATTERN = ...
    CLASS_PATTERN = ...
    TYPE_PATTERN = ...


class Bootstyle:
    @staticmethod
    def ttkstyle_widget_class(widget=..., string=...): # -> str:
        """Find and return the widget class

        Parameters:

            widget (Widget):
                The widget object.

            string (str):
                A keyword string to parse.

        Returns:

            str:
                A widget class keyword.
        """
        ...
    
    @staticmethod
    def ttkstyle_widget_type(string): # -> str:
        """Find and return the widget type.

        Parameters:

            string (str):
                A keyword string to parse.

        Returns:

            str:
                A widget type keyword.
        """
        ...
    
    @staticmethod
    def ttkstyle_widget_orient(widget=..., string=..., **kwargs): # -> str:
        """Find and return widget orient, or default orient for widget if
        a widget with orientation.

        Parameters:

            widget (Widget):
                The widget object.

            string (str):
                A keyword string to parse.

            **kwargs:
                Optional keyword arguments passed in the widget constructor.

        Returns:

            str:
                A widget orientation keyword.
        """
        ...
    
    @staticmethod
    def ttkstyle_widget_color(string): # -> str:
        """Find and return widget color

        Parameters:

            string (str):
                A keyword string to parse.

        Returns:

            str:
                A color keyword.
        """
        ...
    
    @staticmethod
    def ttkstyle_name(widget=..., string=..., **kwargs): # -> str:
        """Parse a string to build and return a ttkstyle name.

        Parameters:

            widget (Widget):
                The widget object.

            string (str):
                A keyword string to parse.

            **kwargs:
                Other keyword arguments to parse widget orientation.

        Returns:

            str:
                A ttk style name
        """
        ...
    
    @staticmethod
    def ttkstyle_method_name(widget=..., string=...): # -> str:
        """Parse a string to build and return the name of the
        `StyleBuilderTTK` method that creates the ttk style for the
        target widget.

        Parameters:

            widget (Widget):
                The widget object to lookup.

            string (str):
                The keyword string to parse.

        Returns:

            str:
                The name of the update method used to update the widget.
        """
        ...
    
    @staticmethod
    def tkupdate_method_name(widget): # -> str:
        """Lookup the tkinter style update method from the widget class

        Parameters:

            widget (Widget):
                The widget object to lookup.

        Returns:

            str:
                The name of the method used to update the widget object.
        """
        ...
    
    @staticmethod
    def override_ttk_widget_constructor(func): # -> Callable[..., None]:
        """Override widget constructors with bootstyle api options.

        Parameters:

            func (Callable):
                The widget class `__init__` method
        """
        ...
    
    @staticmethod
    def override_ttk_widget_configure(func): # -> Callable[..., Any | None]:
        """Overrides the configure method on a ttk widget.

        Parameters:

            func (Callable):
                The widget class `configure` method
        """
        ...
    
    @staticmethod
    def update_ttk_widget_style(widget: ttk.Widget = ..., style_string: str = ..., **kwargs): # -> str:
        """Update the ttk style or create if not existing.

        Parameters:

            widget (ttk.Widget):
                The widget instance being updated.

            style_string (str):
                The style string to evalulate. May be the `style`, `ttkstyle`
                or `bootstyle` argument depending on the context and scenario.

            **kwargs:
                Other optional keyword arguments.

        Returns:

            str:
                The ttkstyle or empty string if there is none.
        """
        ...
    
    @staticmethod
    def setup_ttkbootstrap_api(): # -> None:
        """Setup ttkbootstrap for use with tkinter and ttk. This method
        is called when ttkbootstrap is imported to perform all of the
        necessary method overrides that implement the bootstyle api."""
        ...
    
    @staticmethod
    def update_tk_widget_style(widget): # -> None:
        """Lookup the widget name and call the appropriate update
        method

        Parameters:

            widget (object):
                The tcl/tk name given by `tkinter.Widget.winfo_name()`
        """
        ...
    
    @staticmethod
    def override_tk_widget_constructor(func): # -> Callable[..., None]:
        """Override widget constructors to apply default style for tk
        widgets.

        Parameters:

            func (Callable):
                The `__init__` method for this widget.
        """
        ...
    


